// <auto-generated />
using System;
using DataLayerApi.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayerApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayerApi.Models.Entities.Core.EnumItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EnumItemId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnumItemTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Settings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("EnumItemTypeId");

                    b.HasIndex("IsEnabled", "EnumItemTypeId", "NormalizedName")
                        .IsUnique()
                        .HasName("IX_EnumItem_IsEnabled_EnumItemTypeId_NormalizedName_Unique")
                        .HasAnnotation("SqlServer:Include", new[] { "Name" });

                    b.ToTable("EnumItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnumItemTypeId = 1,
                            IsEnabled = true,
                            Name = "Interní účet",
                            NormalizedName = "Internal",
                            Order = 100,
                            Title = "Účet registrovaný v systému"
                        },
                        new
                        {
                            Id = 2,
                            EnumItemTypeId = 1,
                            IsEnabled = true,
                            Name = "Gmail účet",
                            NormalizedName = "Google",
                            Order = 200,
                            Title = "Účet Google"
                        },
                        new
                        {
                            Id = 3,
                            EnumItemTypeId = 1,
                            IsEnabled = true,
                            Name = "Facebook účet",
                            NormalizedName = "Facebook",
                            Order = 300,
                            Title = "Účet na facebook"
                        },
                        new
                        {
                            Id = 4,
                            EnumItemTypeId = 2,
                            IsEnabled = true,
                            Name = "mililitr",
                            NormalizedName = "ml",
                            Order = 100
                        },
                        new
                        {
                            Id = 5,
                            EnumItemTypeId = 2,
                            IsEnabled = true,
                            Name = "litr",
                            NormalizedName = "l",
                            Order = 200
                        },
                        new
                        {
                            Id = 6,
                            EnumItemTypeId = 2,
                            IsEnabled = true,
                            Name = "gram",
                            NormalizedName = "g",
                            Order = 300
                        },
                        new
                        {
                            Id = 7,
                            EnumItemTypeId = 2,
                            IsEnabled = true,
                            Name = "kilogram",
                            NormalizedName = "kg",
                            Order = 400
                        },
                        new
                        {
                            Id = 8,
                            EnumItemTypeId = 2,
                            IsEnabled = true,
                            Name = "g/l",
                            NormalizedName = "GToL",
                            Order = 500,
                            Title = "gram na litr"
                        },
                        new
                        {
                            Id = 9,
                            EnumItemTypeId = 2,
                            IsEnabled = true,
                            Name = "%",
                            NormalizedName = "Percent",
                            Order = 600,
                            Title = "Procenta"
                        },
                        new
                        {
                            Id = 10,
                            EnumItemTypeId = 3,
                            IsEnabled = true,
                            Name = "String",
                            NormalizedName = "String",
                            Order = 100,
                            Title = "Řetězec"
                        },
                        new
                        {
                            Id = 11,
                            EnumItemTypeId = 3,
                            IsEnabled = true,
                            Name = "Integer",
                            NormalizedName = "Int",
                            Order = 200,
                            Title = "Celočíselný typ"
                        },
                        new
                        {
                            Id = 12,
                            EnumItemTypeId = 3,
                            IsEnabled = true,
                            Name = "Double",
                            NormalizedName = "Double",
                            Order = 300,
                            Title = "Číslo s desetinnou čárkou"
                        },
                        new
                        {
                            Id = 13,
                            EnumItemTypeId = 3,
                            IsEnabled = true,
                            Name = "Boolean",
                            NormalizedName = "Bool",
                            Order = 400,
                            Title = "Boolean"
                        },
                        new
                        {
                            Id = 14,
                            EnumItemTypeId = 3,
                            IsEnabled = true,
                            Name = "DateTime",
                            NormalizedName = "DateTime",
                            Order = 500,
                            Title = "Datum a čas"
                        },
                        new
                        {
                            Id = 15,
                            EnumItemTypeId = 4,
                            IsEnabled = true,
                            Name = "ČR",
                            NormalizedName = "CZ",
                            Order = 100,
                            Title = "Česká republika"
                        },
                        new
                        {
                            Id = 16,
                            EnumItemTypeId = 4,
                            IsEnabled = true,
                            Name = "Slovensko",
                            NormalizedName = "SVK",
                            Order = 200,
                            Title = "Slovenská republika"
                        },
                        new
                        {
                            Id = 17,
                            EnumItemTypeId = 4,
                            IsEnabled = true,
                            Name = "Rakousko",
                            NormalizedName = "AU",
                            Order = 300,
                            Title = "Rakousko"
                        },
                        new
                        {
                            Id = 18,
                            EnumItemTypeId = 4,
                            IsEnabled = true,
                            Name = "Německo",
                            NormalizedName = "DE",
                            Order = 400,
                            Title = "Německo"
                        },
                        new
                        {
                            Id = 19,
                            EnumItemTypeId = 4,
                            IsEnabled = true,
                            Name = "Francie",
                            NormalizedName = "FR",
                            Order = 500,
                            Title = "Francie"
                        },
                        new
                        {
                            Id = 20,
                            EnumItemTypeId = 4,
                            IsEnabled = true,
                            Name = "Chile",
                            NormalizedName = "CHI",
                            Order = 600,
                            Title = "Chile"
                        },
                        new
                        {
                            Id = 21,
                            EnumItemTypeId = 5,
                            IsEnabled = true,
                            Name = "Kč",
                            NormalizedName = "CZK",
                            Order = 700,
                            Title = "Koruna česká"
                        });
                });

            modelBuilder.Entity("DataLayerApi.Models.Entities.Core.EnumItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EnumItemTypeId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("IX_EnumItemType_NormalizedName_Unique");

                    b.HasIndex("ParentId");

                    b.ToTable("EnumItemTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsEnabled = true,
                            Name = "Typ účtu",
                            NormalizedName = "AccountType",
                            Order = 100,
                            Title = "Typ účtu k přihlášení uživatele"
                        },
                        new
                        {
                            Id = 2,
                            IsEnabled = true,
                            Name = "Jednotky",
                            NormalizedName = "Unit",
                            Order = 200
                        },
                        new
                        {
                            Id = 3,
                            IsEnabled = true,
                            Name = "Datový typ",
                            NormalizedName = "DataType",
                            Order = 300,
                            Title = "Datový typ"
                        },
                        new
                        {
                            Id = 4,
                            IsEnabled = true,
                            Name = "Státy",
                            NormalizedName = "Country",
                            Order = 400,
                            ParentId = 1,
                            Title = "Státy"
                        },
                        new
                        {
                            Id = 5,
                            IsEnabled = true,
                            Name = "Měna",
                            NormalizedName = "Currency",
                            Order = 500
                        });
                });

            modelBuilder.Entity("DataLayerApi.Models.Entities.UserManagement.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RoleId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.HasIndex("IsEnabled", "NormalizedName")
                        .HasName("IX_Role_IsEnabled_NormalizedName_Unique")
                        .HasAnnotation("SqlServer:Include", new[] { "Name", "Title" });

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "c4c084bb-cab3-40fe-a19e-9e12820ba302",
                            IsEnabled = false,
                            Name = "Všichni uživatelé",
                            NormalizedName = "AllUsers",
                            Order = 100,
                            Title = "Skupina všech uživatelů"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "8fe1ee6a-162f-429c-8fc2-932f8fcfbee1",
                            IsEnabled = true,
                            Name = "Administrator",
                            NormalizedName = "Admin",
                            Order = 200,
                            Title = "Administrátor- správa aplikace"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "5b32df3e-bd8e-44ce-92a4-d9d0a8e4184f",
                            IsEnabled = true,
                            Name = "Prodejce",
                            NormalizedName = "Seller",
                            Order = 300,
                            Title = "Prodejce zboží"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "866269ed-3cc5-408c-9011-3052fe69f59f",
                            IsEnabled = true,
                            Name = "Zákazník",
                            NormalizedName = "Customer",
                            Order = 400,
                            Title = "Zákazník"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "6a194d45-c591-430e-aae1-e0349bc826b8",
                            IsEnabled = true,
                            Name = "OvěřenýZákazník",
                            NormalizedName = "VerifiedCustomer",
                            Order = 500,
                            Title = "Ověřený zákazník"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "a95c2572-b097-4e34-8b72-317298f89f54",
                            IsEnabled = true,
                            Name = "Host",
                            NormalizedName = "Guest",
                            Order = 600,
                            Title = "Host aplikace s minimálními oprávněními"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = "edb0b8ed-0ec8-4dd4-948f-4002e6c84d14",
                            IsEnabled = true,
                            Name = "Dodavatel",
                            NormalizedName = "Supplier",
                            Order = 700,
                            Title = "Dodavatel zboží"
                        });
                });

            modelBuilder.Entity("DataLayerApi.Models.Entities.UserManagement.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("IX_User_UserName_Unique");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserLogin<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DataLayerApi.Models.Entities.UserManagement.Login", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>");

                    b.Property<int>("EnumItemId_AccountType")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasIndex("EnumItemId_AccountType");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId", "UserName", "EnumItemId_AccountType")
                        .IsUnique()
                        .HasName("IX_Login_UserId_UserName_EnumItemId_AccountType_Unique")
                        .HasFilter("[UserName] IS NOT NULL AND [EnumItemId_AccountType] IS NOT NULL");

                    b.ToTable("Logins");

                    b.HasDiscriminator().HasValue("Login");
                });

            modelBuilder.Entity("DataLayerApi.Models.Entities.Core.EnumItem", b =>
                {
                    b.HasOne("DataLayerApi.Models.Entities.Core.EnumItemType", "EnumItemType")
                        .WithMany("EnumItems")
                        .HasForeignKey("EnumItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayerApi.Models.Entities.Core.EnumItemType", b =>
                {
                    b.HasOne("DataLayerApi.Models.Entities.Core.EnumItemType", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DataLayerApi.Models.Entities.UserManagement.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataLayerApi.Models.Entities.UserManagement.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataLayerApi.Models.Entities.UserManagement.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DataLayerApi.Models.Entities.UserManagement.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayerApi.Models.Entities.UserManagement.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataLayerApi.Models.Entities.UserManagement.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayerApi.Models.Entities.UserManagement.Login", b =>
                {
                    b.HasOne("DataLayerApi.Models.Entities.Core.EnumItem", "AccountType")
                        .WithMany("LoginTypes")
                        .HasForeignKey("EnumItemId_AccountType")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataLayerApi.Models.Entities.UserManagement.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
